swagger: "2.0"

################################################################################
#                              API Information                                 #
################################################################################
info:
  description: "This is ProjektZespolowy-WSIZ API contract"
  version: "1.1.0"
  title: "ProjektZespolowy-WSIZ"
  contact:
    email: "apiteam@swagger.io"

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: "localhost:8080"
basePath: "/"
tags:
  - name: "User"
    description: "Operations related to users"
  - name: "Expense"
    description: "Operations related to expenses"
  - name: "Category"
    description: "Operations related to categories"

schemes:
  - "http"

################################################################################
#                                           Paths                              #
################################################################################
paths:
  /users:
    get:
      tags:
        - "User"
      summary: "Get all users"
      description: "Retrieve a list of all users"
      responses:
        200:
          description: "A list of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserDTO"
    post:
      tags:
        - "User"
      summary: "Create a new user"
      description: "Create a new user"
      parameters:
        - in: "body"
          name: "body"
          description: "User object"
          required: true
          schema:
            $ref: "#/definitions/UserDTO"
      responses:
        201:
          description: "User created"
          schema:
            $ref: "#/definitions/UserDTO"

  /users/{id}:
    get:
      tags:
        - "User"
      summary: "Get a user by ID"
      description: "Retrieve a user by their ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "A single user"
          schema:
            $ref: "#/definitions/UserDTO"
        404:
          description: "User not found"
    put:
      tags:
        - "User"
      summary: "Update a user by ID"
      description: "Update a user by their ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/UserDTO"
      responses:
        200:
          description: "User updated"
          schema:
            $ref: "#/definitions/UserDTO"
        404:
          description: "User not found"
    delete:
      tags:
        - "User"
      summary: "Delete a user by ID"
      description: "Delete a user by their ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "User deleted"
        404:
          description: "User not found"

  /expenses:
    get:
      tags:
        - "Expense"
      summary: "Get all expenses"
      description: "Retrieve a list of all expenses"
      responses:
        200:
          description: "A list of expenses"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExpenseDTO"
    post:
      tags:
        - "Expense"
      summary: "Create a new expense"
      description: "Create a new expense"
      parameters:
        - in: "body"
          name: "body"
          description: "Expense object"
          required: true
          schema:
            $ref: "#/definitions/ExpenseDTO"
      responses:
        201:
          description: "Expense created"
          schema:
            $ref: "#/definitions/ExpenseDTO"

  /expenses/{id}:
    get:
      tags:
        - "Expense"
      summary: "Get an expense by ID"
      description: "Retrieve an expense by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "A single expense"
          schema:
            $ref: "#/definitions/ExpenseDTO"
        404:
          description: "Expense not found"
    put:
      tags:
        - "Expense"
      summary: "Update an expense by ID"
      description: "Update an expense by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Updated expense object"
          required: true
          schema:
            $ref: "#/definitions/ExpenseDTO"
      responses:
        200:
          description: "Expense updated"
          schema:
            $ref: "#/definitions/ExpenseDTO"
        404:
          description: "Expense not found"
    delete:
      tags:
        - "Expense"
      summary: "Delete an expense by ID"
      description: "Delete an expense by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "Expense deleted"
        404:
          description: "Expense not found"

  /categories:
    get:
      tags:
        - "Category"
      summary: "Get all categories"
      description: "Retrieve a list of all categories"
      responses:
        200:
          description: "A list of categories"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CategoryDTO"
    post:
      tags:
        - "Category"
      summary: "Create a new category"
      description: "Create a new category"
      parameters:
        - in: "body"
          name: "body"
          description: "Category object"
          required: true
          schema:
            $ref: "#/definitions/CategoryDTO"
      responses:
        201:
          description: "Category created"
          schema:
            $ref: "#/definitions/CategoryDTO"

  /categories/{id}:
    get:
      tags:
        - "Category"
      summary: "Get a category by ID"
      description: "Retrieve a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "A single category"
          schema:
            $ref: "#/definitions/CategoryDTO"
        404:
          description: "Category not found"
    put:
      tags:
        - "Category"
      summary: "Update a category by ID"
      description: "Update a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Updated category object"
          required: true
          schema:
            $ref: "#/definitions/CategoryDTO"
      responses:
        200:
          description: "Category updated"
          schema:
            $ref: "#/definitions/CategoryDTO"
        404:
          description: "Category not found"
    delete:
      tags:
        - "Category"
      summary: "Delete a category by ID"
      description: "Delete a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
      responses:
        204:
          description: "Category deleted"
        404:
          description: "Category not found"
################################################################################
#                                       Definitions                            #
################################################################################
definitions:

  UserDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      expenses:
        type: "array"
        items:
          $ref: "#/definitions/ExpenseDTO"
      customCategories:
        type: "array"
        items:
          $ref: "#/definitions/CategoryDTO"

  ExpenseDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      amount:
        type: "number"
        format: "double"
      date:
        type: "string"
        format: "date"
      category:
        $ref: "#/definitions/CategoryDTO"
      user:
        $ref: "#/definitions/UserDTO"

  CategoryDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      user:
        $ref: "#/definitions/UserDTO"
      expenses:
        type: "array"
        items:
          $ref: "#/definitions/ExpenseDTO"
