swagger: "2.0"

################################################################################
#                              API Information                                 #
################################################################################
info:
  description: "This is ProjektZespolowy-WSIZ API contract"
  version: "1.1.0"
  title: "ProjektZespolowy-WSIZ"
  contact:
    email: "apiteam@swagger.io"

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: "localhost:8080"
basePath: "/"
tags:
  - name: "User"
    description: "Operations related to users"
  - name: "Expense"
    description: "Operations related to expenses"
  - name: "Income"
    description: "Operations related to incomes"
  - name: "Category"
    description: "Operations related to categories"

schemes:
  - "http"

################################################################################
#                                           Paths                              #
################################################################################
paths:
  /users:
    get:
      tags:
        - "User"
      summary: "Get all users"
      operationId: getUsers
      description: "Retrieve a list of all users"
      responses:
        200:
          description: "A list of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - "User"
      summary: "Create a new user"
      operationId: createUser
      description: "Create a new user"
      parameters:
        - in: "body"
          name: "body"
          description: "User object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User created"
          schema:
            $ref: "#/definitions/User"

  /users/{id}:
    get:
      tags:
        - "User"
      summary: "Get a user by ID"
      operationId: getUser
      description: "Retrieve a user by their ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single user"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    put:
      tags:
        - "User"
      summary: "Update a user by ID"
      operationId: updateUser
      description: "Update a user by their ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    delete:
      tags:
        - "User"
      summary: "Delete a user by ID"
      operationId: deleteUser
      description: "Delete a user by their ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "User deleted"
        404:
          description: "User not found"

  /expenses:
    get:
      tags:
        - "Expense"
      summary: "Get all expenses"
      operationId: getExpenses
      description: "Retrieve a list of all expenses"
      responses:
        200:
          description: "A list of expenses"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Expense"
    post:
      tags:
        - "Expense"
      summary: "Create a new expense"
      operationId: createExpense
      description: "Create a new expense"
      parameters:
        - in: "body"
          name: "body"
          description: "Expense object"
          required: true
          schema:
            $ref: "#/definitions/Expense"
      responses:
        201:
          description: "Expense created"
          schema:
            $ref: "#/definitions/Expense"

  /expenses/{id}:
    get:
      tags:
        - "Expense"
      summary: "Get an expense by ID"
      operationId: getExpense
      description: "Retrieve an expense by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single expense"
          schema:
            $ref: "#/definitions/Expense"
        404:
          description: "Expense not found"
    put:
      tags:
        - "Expense"
      summary: "Update an expense by ID"
      operationId: updateExpense
      description: "Update an expense by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated expense object"
          required: true
          schema:
            $ref: "#/definitions/Expense"
      responses:
        200:
          description: "Expense updated"
          schema:
            $ref: "#/definitions/Expense"
        404:
          description: "Expense not found"
    delete:
      tags:
        - "Expense"
      summary: "Delete an expense by ID"
      operationId: deleteExpense
      description: "Delete an expense by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Expense deleted"
        404:
          description: "Expense not found"

  /incomes:
    get:
      tags:
        - "Income"
      summary: "Get all incomes"
      operationId: getIncomes
      description: "Retrieve a list of all incomes"
      responses:
        200:
          description: "A list of incomes"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Income"
    post:
      tags:
        - "Income"
      summary: "Create a new income"
      operationId: createIncome
      description: "Create a new income"
      parameters:
        - in: "body"
          name: "body"
          description: "Income object"
          required: true
          schema:
            $ref: "#/definitions/Income"
      responses:
        201:
          description: "Income created"
          schema:
            $ref: "#/definitions/Income"

  /incomes/{id}:
    get:
      tags:
        - "Income"
      summary: "Get an income by ID"
      operationId: getIncome
      description: "Retrieve an income by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single income"
          schema:
            $ref: "#/definitions/Income"
        404:
          description: "Income not found"
    put:
      tags:
        - "Income"
      summary: "Update an income by ID"
      operationId: updateIncome
      description: "Update an income by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated income object"
          required: true
          schema:
            $ref: "#/definitions/Income"
      responses:
        200:
          description: "Income updated"
          schema:
            $ref: "#/definitions/Income"
        404:
          description: "Income not found"
    delete:
      tags:
        - "Income"
      summary: "Delete an income by ID"
      operationId: deleteIncome
      description: "Delete an income by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Income deleted"
        404:
          description: "Income not found"

  /expense-categories:
    get:
      tags:
        - "ExpenseCategory"
      summary: "Get all expense categories"
      operationId: getExpenseCategories
      description: "Retrieve a list of all expense categories"
      responses:
        200:
          description: "A list of expense categories"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExpenseCategory"
    post:
      tags:
        - "ExpenseCategory"
      summary: "Create a new expense category"
      operationId: createExpenseCategory
      description: "Create a new expense category"
      parameters:
        - in: "body"
          name: "body"
          description: "Expense category object"
          required: true
          schema:
            $ref: "#/definitions/ExpenseCategory"
      responses:
        201:
          description: "Expense category created"
          schema:
            $ref: "#/definitions/ExpenseCategory"

  /expense-categories/{id}:
    get:
      tags:
        - "ExpenseCategory"
      summary: "Get an expense category by ID"
      operationId: getExpenseCategory
      description: "Retrieve an expense category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single expense category"
          schema:
            $ref: "#/definitions/ExpenseCategory"
        404:
          description: "Expense category not found"
    put:
      tags:
        - "ExpenseCategory"
      summary: "Update an expense category by ID"
      operationId: updateExpenseCategory
      description: "Update an expense category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated expense category object"
          required: true
          schema:
            $ref: "#/definitions/ExpenseCategory"
      responses:
        200:
          description: "Expense category updated"
          schema:
            $ref: "#/definitions/ExpenseCategory"
        404:
          description: "Expense category not found"
    delete:
      tags:
        - "ExpenseCategory"
      summary: "Delete an expense category by ID"
      operationId: deleteExpenseCategory
      description: "Delete an expense category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Expense category deleted"
        404:
          description: "Expense category not found"

  /income-categories:
    get:
      tags:
        - "IncomeCategory"
      summary: "Get all income categories"
      operationId: getIncomeCategories
      description: "Retrieve a list of all income categories"
      responses:
        200:
          description: "A list of income categories"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IncomeCategory"
    post:
      tags:
        - "IncomeCategory"
      summary: "Create a new income category"
      operationId: createIncomeCategory
      description: "Create a new income category"
      parameters:
        - in: "body"
          name: "body"
          description: "Income category object"
          required: true
          schema:
            $ref: "#/definitions/IncomeCategory"
      responses:
        201:
          description: "Income category created"
          schema:
            $ref: "#/definitions/IncomeCategory"

  /income-categories/{id}:
    get:
      tags:
        - "IncomeCategory"
      summary: "Get an income category by ID"
      operationId: getIncomeCategory
      description: "Retrieve an income category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single income category"
          schema:
            $ref: "#/definitions/IncomeCategory"
        404:
          description: "Income category not found"
    put:
      tags:
        - "IncomeCategory"
      summary: "Update an income category by ID"
      operationId: updateIncomeCategory
      description: "Update an income category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated income category object"
          required: true
          schema:
            $ref: "#/definitions/IncomeCategory"
      responses:
        200:
          description: "Income category updated"
          schema:
            $ref: "#/definitions/IncomeCategory"
        404:
          description: "Income category not found"
    delete:
      tags:
        - "IncomeCategory"
      summary: "Delete an income category by ID"
      operationId: deleteIncomeCategory
      description: "Delete an income category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Income category deleted"
        404:
          description: "Income category not found"

  /reports:
    get:
      tags:
        - "Report"
      summary: "Get all reports"
      operationId: getReports
      description: "Retrieve a list of all reports"
      responses:
        200:
          description: "A list of reports"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Report"
    post:
      tags:
        - "Report"
      summary: "Create a new report"
      operationId: createReport
      description: "Create a new report"
      parameters:
        - in: "body"
          name: "body"
          description: "Report object"
          required: true
          schema:
            $ref: "#/definitions/Report"
      responses:
        201:
          description: "Report created"
          schema:
            $ref: "#/definitions/Report"

  /reports/{id}:
    get:
      tags:
        - "Report"
      summary: "Get a report by ID"
      operationId: getReport
      description: "Retrieve a report by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single report"
          schema:
            $ref: "#/definitions/Report"
        404:
          description: "Report not found"
    put:
      tags:
        - "Report"
      summary: "Update a report by ID"
      operationId: updateReport
      description: "Update a report by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated report object"
          required: true
          schema:
            $ref: "#/definitions/Report"
      responses:
        200:
          description: "Report updated"
          schema:
            $ref: "#/definitions/Report"
        404:
          description: "Report not found"
    delete:
      tags:
        - "Report"
      summary: "Delete a report by ID"
      operationId: deleteReport
      description: "Delete a report by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Report deleted"
        404:
          description: "Report not found"

  /forecasts:
    get:
      tags:
        - "Forecast"
      summary: "Get all forecasts"
      operationId: getForecasts
      description: "Retrieve a list of all forecasts"
      responses:
        200:
          description: "A list of forecasts"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Forecast"
    post:
      tags:
        - "Forecast"
      summary: "Create a new forecast"
      operationId: createForecast
      description: "Create a new forecast"
      parameters:
        - in: "body"
          name: "body"
          description: "Forecast object"
          required: true
          schema:
            $ref: "#/definitions/Forecast"
      responses:
        201:
          description: "Forecast created"
          schema:
            $ref: "#/definitions/Forecast"

  /forecasts/{id}:
    get:
      tags:
        - "Forecast"
      summary: "Get a forecast by ID"
      operationId: getForecast
      description: "Retrieve a forecast by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "A single forecast"
          schema:
            $ref: "#/definitions/Forecast"
        404:
          description: "Forecast not found"
    put:
      tags:
        - "Forecast"
      summary: "Update a forecast by ID"
      operationId: updateForecast
      description: "Update a forecast by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Updated forecast object"
          required: true
          schema:
            $ref: "#/definitions/Forecast"
      responses:
        200:
          description: "Forecast updated"
          schema:
            $ref: "#/definitions/Forecast"
        404:
          description: "Forecast not found"
    delete:
      tags:
        - "Forecast"
      summary: "Delete a forecast by ID"
      operationId: deleteForecast
      description: "Delete a forecast by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Forecast deleted"
        404:
          description: "Forecast not found"

################################################################################
#                                       Definitions                            #
################################################################################
definitions:

  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      username:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
      expenses:
        type: "array"
        items:
          $ref: "#/definitions/Expense"
      incomes:
        type: "array"
        items:
          $ref: "#/definitions/Income"
      customCategories:
        type: "array"
        items:
          $ref: "#/definitions/ExpenseCategory"

  Expense:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      description:
        type: "string"
      amount:
        type: "number"
        format: "double"
      date:
        type: "string"
        format: "date"
      category:
        $ref: "#/definitions/ExpenseCategory"

  Income:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      description:
        type: "string"
      amount:
        type: "number"
        format: "double"
      date:
        type: "string"
        format: "date"
      category:
        $ref: "#/definitions/IncomeCategory"

  ExpenseCategory:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      expenses:
        type: "array"
        items:
          $ref: "#/definitions/Expense"

  IncomeCategory:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      incomes:
        type: "array"
        items:
          $ref: "#/definitions/Income"

  Report:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      startDate:
        type: "string"
        format: "date"
      endDate:
        type: "string"
        format: "date"
      type:
        type: "string"


  Forecast:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      forecastDate:
        type: "string"
        format: "date"
      predictedAmount:
        type: "number"
        format: "double"
      type:
        type: "string"

